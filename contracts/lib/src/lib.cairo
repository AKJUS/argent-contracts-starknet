mod asserts;
use asserts::assert_only_self;
use asserts::assert_no_self_call;
use asserts::assert_non_reentrant;
use asserts::assert_correct_tx_version;

mod span_serde;
use span_serde::SpanSerde;

mod external_execution;
use external_execution::ExternalExecution;
use external_execution::hash_external_execution_message;

// Structures 
mod calls;
use calls::Call;
use calls::execute_multicall;

mod version;
use version::Version;
use version::VersionSerde;

#[abi]
trait IErc165 {
    fn supports_interface(interface_id: felt252) -> bool;
}

#[abi]
trait IAccountUpgrade {
    fn execute_after_upgrade(data: Array<felt252>) -> Array::<felt252>;
}


// To be deleted once generated by framework

use array::ArrayTrait;
use gas::withdraw_gas_all;

#[inline(always)]
fn check_enough_gas() {
    match withdraw_gas_all(get_builtin_costs()) {
        Option::Some(_) => {},
        Option::None(_) => {
            let mut err_data = ArrayTrait::new();
            err_data.append('Out of gas');
            panic(err_data)
        }
    }
}

#[cfg(test)]
mod tests;
